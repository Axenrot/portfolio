/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: prozip (https://sketchfab.com/quachkimson2000)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/bulbasaur-pokemon-animated-d2a9a7962613438387880a195cd8a1df
Title: Bulbasaur Pokemon [Animated]
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export default function Bulbasaur({ formState, ...props }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/models/bulbasaur.glb");
  const { actions } = useAnimations(animations, group);
  const walk = "model_skeleton|001walk";
  const idle = "model_skeleton|001aidle";
  const run = "model_skeleton|001run";
  const jumpS = "model_skeleton|001jump_s";
  const jumpL = "model_skeleton|001jump_l";
  const jumpE = "model_skeleton|001jump_e";
  const ko = "model_skeleton|001ko";
  const fight_b = "model_skeleton|001fight_b";
  const fight_d = "model_skeleton|001fight_d";
  const [currentAction, setCurrentAction] = useState(idle);

  useEffect(() => {
    switch (formState) {
      case "walking":
        actions[currentAction].stop();
        actions[walk].reset().play();
        setCurrentAction(walk);
        break;
      case "idling":
        actions[currentAction].stop();
        actions[idle].reset().play();
        setCurrentAction(idle);
        break;
      case "running":
        actions[currentAction].stop();
        actions[run].reset().play();
        break;
      case "jumping_small":
        actions[currentAction].stop();
        actions[jumpS].reset().play();
        break;
      case "jumping_large":
        actions[currentAction].stop();
        actions[jumpL].reset().play();
        setCurrentAction(jumpL);
        break;
      case "jumping_extra":
        actions[currentAction].stop();
        actions[jumpE].reset().play();
        setCurrentAction(jumpE);
        break;
      case "knocked_out":
        actions[currentAction].stop();
        actions[ko].reset().play();
        setCurrentAction(ko);
        break;
      case "fighting_basic":
        actions[currentAction].stop();
        actions[fight_b].reset().play(setCurrentAction(fight_b));
        break;
      case "fighting_defensive":
        actions[currentAction].stop();
        actions[fight_d].reset().play(setCurrentAction(fight_d));
        break;
      // Add more cases for other animation states as needed
      default:
        actions[currentAction].stop();
        actions[idle].play();
        break;
    }
  }, [formState, actions, currentAction]);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="001_0">
                <group name="model_skeleton_3">
                  <group name="GLTF_created_0">
                    <primitive object={nodes.GLTF_created_0_rootJoint} />
                    <skinnedMesh
                      name="Object_84"
                      geometry={nodes.Object_84.geometry}
                      material={materials["001BodyB1"]}
                      skeleton={nodes.Object_84.skeleton}
                    />
                    <skinnedMesh
                      name="Object_85"
                      geometry={nodes.Object_85.geometry}
                      material={materials["001BodyA1"]}
                      skeleton={nodes.Object_85.skeleton}
                    />
                    <skinnedMesh
                      name="Object_86"
                      geometry={nodes.Object_86.geometry}
                      material={materials["001Iris1"]}
                      skeleton={nodes.Object_86.skeleton}
                    />
                    <skinnedMesh
                      name="Object_87"
                      geometry={nodes.Object_87.geometry}
                      material={materials["001Eye1"]}
                      skeleton={nodes.Object_87.skeleton}
                    />
                    <group name="model_2_correction">
                      <group name="model_2" />
                    </group>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/bulbasaur.glb");
